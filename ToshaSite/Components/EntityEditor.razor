@inject IModalService Modals
@inject IEntityService Entities

<style>
    .form {
        width: 400px;
    }

    .form div {
        margin: 7px;
    }

    .form button {
        margin-top: 15px;
    }

    .form label {
        width: 20%;
        display: inline-block;
    }

    .form input {
        width: 70%;
    }
</style>

<div class="form">
    <div>
        <label for="i-link">Ссылка</label>
        <input @bind="EntityObject.Link" id="i-link" type="text" />
    </div>

    <div>
        <label for="i-double">Двойная</label>
        <input style="width: auto;" @bind="IsDouble" id="i-double" type="checkbox" />
    </div>

    @if (IsDouble)
    {
        <div>
            <label for="i-text">Текст</label>
            <input @bind="EntityObject.Text" id="i-text" type="text" />
        </div>
    }
    else
    {
        <div>
            <label for="i-pic">Картинка</label>
            <input @bind="EntityObject.ImageLink" id="i-pic" type="text" />
        </div>
    }

    <button @onclick="SaveClicked">Сохранить</button>
    @if (!Creating)
    {
        <button @onclick="DeleteClicked">Удалить</button>
    }
</div>

@code {
    public Entity EntityObject { get; set; }

    public bool IsDouble { get; set; }

    public bool Creating { get; set; }

    [CascadingParameter] ModalParameters Parameters { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        EntityObject = Parameters.Get<Entity>("EntityObject");
        IsDouble = EntityObject.ImageLink == null;
        Creating = Parameters.Get<bool>("Creating");
    }

    private void SaveClicked()
    {
        if(IsDouble)
        {
            EntityObject.ImageLink = null;
        }
        else
        {
            EntityObject.Text = null;
        }
        Entities.SaveEntity(EntityObject);
        Modals.Close(ModalResult.Ok(EntityObject));        
    }

    private void DeleteClicked()
    {
        Entities.DeleteEntity(EntityObject);
        Modals.Close(ModalResult.Ok(EntityObject)); 
    }
}
