@page "/"
@inject IEntityService Service
@inject IToastService Toast

<div class="container">
    @foreach (var e in ToshaEntities)
    {
        if (e.ImageLink != null)
        {
            <ToshaEntity EntityObject="e" />
        }
        else
        {
            <DoubleToshaEntity EntityObject="e" />
        }
    }
    @if(EditorMode)
    {
        <ToshaEntity EditorMode="EditorMode" EditCompleted="AddOrEditEntity" />
    }
</div>


@code {
    List<Entity> ToshaEntities { get; set; } = new List<Entity>();
    public static bool EditorMode { get; set; } = false;

    protected override void OnInitialized()
    {
        ToshaEntities.AddRange(Service.GetEntities());
    }

    void AddOrEditEntity(Entity newEntity)
    {
        var e = ToshaEntities.FirstOrDefault(x => x.Id == newEntity.Id);
        if(e != null)
        {
            ToshaEntities.Remove(e);
        }
        ToshaEntities.Insert(0, newEntity);
    }

    static List<string> KeysDown = new List<string>();

    [JSInvokable]
    public static void KeyDown(string key)
    {
        if(!KeysDown.Contains(key))
        {
            KeysDown.Add(key);

            if(KeysDown.Contains("a") && KeysDown.Contains("n") && KeysDown.Contains("t") && KeysDown.Contains("o"))
            {
                EditorMode = !EditorMode;
                //Toast.ShowInfo("EDITOR MODE " + (EditorMode ? "ON" : "OFF"));
            }
        }
    }

    [JSInvokable]
    public static void KeyUp(string key)
    {
        KeysDown.Remove(key);
    }
}